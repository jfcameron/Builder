# Purpose: Generates project files using the given generator
# Variables prefixed with Args.* and Config.* are required commandline arguments
# and are most conveniently supplied via the accompanying python script "PreCMakelists.py"
# Usage: Do not use directly, instead run PreCMakelists.py
cmake_minimum_required (VERSION 3.0)
cmake_policy(SET CMP0037 NEW)

include("lib/debug.cmake")
include("lib/filter.cmake")

# Check bash args, bail if required are not present
if (NOT DEFINED Args.Platform OR Args.Platform STREQUAL "")
    debug_error("A platform must be selected! Insure -DArgs.Platform=\"PlatformName\" arg is present in cmake call!")
endif()

# Set consts
set(SOURCE_ROOT "../src")

# Collect, sort common files, warn on 0
file(GLOB_RECURSE COMMON_SOURCE_FILES "${SOURCE_ROOT}/common/*.cpp" "${SOURCE_ROOT}/common/*.h")
list(LENGTH COMMON_SOURCE_FILES commonSourceFileCount)
if (commonSourceFileCount LESS "1")
    debug_warn("There are no common files. Is this correct?")
endif()
debug_log("Common files (${commonSourceFileCount}):")
foreach(file_path ${COMMON_SOURCE_FILES})
    debug_log(${file_path})
endforeach()
filter_assignSourceGroups(${COMMON_SOURCE_FILES})

# Collect, sort platform files, warn on 0
file(GLOB_RECURSE PLATFORM_SPECIFIC_SOURCE_FILES "${SOURCE_ROOT}/${Args.Platform}/*.cpp" "${SOURCE_ROOT}/${Args.Platform}/*.h")
list(LENGTH PLATFORM_SPECIFIC_SOURCE_FILES platformSpecificSourceFileCount)
if (platformSpecificSourceFileCount LESS "1")
    debug_warn("There are no platform specific files (${Args.Platform}). Is this correct?")
endif()
debug_log("Platform specific files (${Args.Platform}, ${platformSpecificSourceFileCount}):")
foreach(file_path ${PLATFORM_SPECIFIC_SOURCE_FILES})
    debug_log(${file_path})
endforeach()
filter_assignSourceGroups(${PLATFORM_SPECIFIC_SOURCE_FILES})

# Throw an error if there are no source files present in the project
if (commonSourceFileCount LESS "1" AND platformSpecificSourceFileCount LESS "1")
    debug_error("There are no source files in the project!")
endif()

# Set up include paths
include_directories(BEFORE SYSTEM "${Config.IncludePaths}")
include_directories(BEFORE "${SOURCE_ROOT}/common" "${SOURCE_ROOT}/${Args.Platform}")

# Build the project
project ("${Config.ProjectName}")

if (Config.ProjectType STREQUAL "Executable")
    add_executable("${Config.ProjectType}" ${COMMON_SOURCE_FILES} ${PLATFORM_SPECIFIC_SOURCE_FILES})
elseif(Config.ProjectType STREQUAL "StaticLibrary")
    add_library("${Config.ProjectType}" STATIC ${COMMON_SOURCE_FILES} ${PLATFORM_SPECIFIC_SOURCE_FILES})
elseif(Config.ProjectType STREQUAL "SharedLibrary")
    add_library("${Config.ProjectType}" SHARED ${COMMON_SOURCE_FILES} ${PLATFORM_SPECIFIC_SOURCE_FILES})
else()
    debug_error("Config.ProjectType = ${Config.ProjectType}\nConfig.ProjectType is an enum and must be: Executable, StaticLibrary or SharedLibrary")
endif()
